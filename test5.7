using System;
using System.Collections.Generic;
using System.Threading;

namespace School
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.ForegroundColor = ConsoleColor.White;
            Console.WindowHeight = 50;
            Console.WindowWidth = 180;

            Arena arena = new Arena();

            bool isGameActive = true;
            string startGame = "1";
            string exitGame = "2";

            while (isGameActive)
            {
                Console.Clear();

                Console.WriteLine($"To start Game press -- {startGame}");
                Console.WriteLine($"To exit press -- {exitGame}");

                string userInput = Console.ReadLine();

                if (userInput == "1")
                {
                    Console.Clear();
                    arena.DisplayMainInformation();
                }
                else if (userInput == "2")
                {
                    isGameActive = false;
                }
            }
        }
    }

    class Arena
    {
        private List<Fighter> _fighters = new List<Fighter>();
        private List<Fighter> _preaperingFighters = new List<Fighter>();

        public Arena()
        {
            AddFighters();
        }

        public void DisplayMainInformation()
        {
            int maxFightersOnArena = 2;
            int oneSecond = 1000;

            while (_preaperingFighters.Count != maxFightersOnArena)
            {
                DisplayFighters();


                if (TrySelectFighter(out Fighter fighter))
                {
                    _preaperingFighters.Add(fighter.Clone());
                    Console.Clear();
                }
                else
                {
                    Console.WriteLine("Fighter not found!");
                    Thread.Sleep(oneSecond);
                    Console.Clear();
                }
            }

            Fight(_preaperingFighters[0], _preaperingFighters[1]);

            Console.ReadLine();
        }

        private bool TrySelectFighter(out Fighter fighter)
        {
            int index;

            Console.Write("Select the fighters: ");

            if (int.TryParse(Console.ReadLine(), out index))
            {
                index -= 1;
                if (index < _fighters.Count)
                {
                    fighter = _fighters[index];
                    return fighter != null;
                }
                else
                {
                    fighter = null;
                    return false;
                }
            }
            else
            {
                fighter = null;
                return false;
            }
        }

        private void AddFighters()
        {
            _fighters.Add(new StormRaider("Storm Raider", 150, 25, "This fighter does not possess great strength, but he knows how to use healing magic, replenishing his health by 5 points after each attack."));
            _fighters.Add(new InfernoWarrior("Inferno Warrior", 150, 25, "This fighter's fury awakens when his health level falls below 75, and he can deliver a super blow while defending against the opponent. But only once!"));
            _fighters.Add(new GlacialKinght("Glacial Kinght", 150, 25, "This fighter is quite proficient with a shield, and there is a high probability that he will be able to fend off the opponent's attack."));
            _fighters.Add(new TerraGuardian("Terra Guardian", 150, 25, "This fighter deflects every third attack completely!"));
            _fighters.Add(new KamehamehaWarrior("Kamehameha Warrior", 150, 25, "Every fourth attack of this fighter will be very powerful! A whopping 25 points!"));
        }

        private void DisplayFighters()
        {
            for (int i = 0; i < _fighters.Count; i++)
            {
                Console.WriteLine($"Fighter name - {_fighters[i].GetName} | Fighter's health - {_fighters[i].GetHealth} | Attack power - {_fighters[i].GetPower}");
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine($"{_fighters[i].GetDescription}\n");
                Console.ForegroundColor = ConsoleColor.White;
            }
            RenderLine();
        }

        private void ShowStats(Fighter fighterOne, Fighter fighterTwo)
        {
            Console.WriteLine($"Fighter Two - / {fighterOne.GetName}/ health {fighterOne.GetHealth}|| Fighter Two - / {fighterTwo.GetName}/ health {fighterTwo.GetHealth}");
        }

        private void Fight(Fighter fighterOne, Fighter fighterTwo)
        {
            bool isFightActive = true;

            while (isFightActive)
            {
                fighterOne.TakeDamage(fighterTwo.GetHitPower());
                fighterTwo.TakeDamage(fighterOne.GetHitPower());
                _preaperingFighters.Clear();

                ShowStats(fighterOne, fighterTwo);
                Thread.Sleep(500);

                if (fighterOne.GetHealth == 0 && fighterTwo.GetHealth == 0)
                {
                    Console.WriteLine("Draw");

                    isFightActive = false;
                }
                else if (fighterTwo.GetHealth == 0)
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine($"Winner is {fighterOne.GetName}");
                    Console.ForegroundColor = ConsoleColor.White;

                    isFightActive = false;
                }
                else if (fighterOne.GetHealth == 0)
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine($"Winner is {fighterTwo.GetName}");
                    Console.ForegroundColor = ConsoleColor.White;

                    isFightActive = false;
                }
            }
        }

        private void RenderLine()
        {
            Console.WriteLine("\n**" + new string('-', 75) + "**\n");
        }
    }

    abstract class Fighter
    {
        public Fighter(string name, int health, int power, string description)
        {
            Health = health;
            Name = name;
            Power = power;
            Description = description;
        }
        protected int Power;
        protected string Name;
        protected int Health;
        protected string Description;

        public int GetHealth
        {
            get { return Health; }
        }

        public int GetPower
        {
            get { return Power; }
        }

        public string GetName
        {
            get { return Name; }
        }

        public string GetDescription
        {
            get { return Description; }
        }

        public Fighter Clone()
        {
            return (Fighter)MemberwiseClone();
        }

        public abstract void TakeDamage(int damage);

        public abstract int GetHitPower();
    }

    class StormRaider : Fighter
    {
        public StormRaider(string name, int health, int power, string description) : base(name, health, power, description)
        {
        }

        public override void TakeDamage(int damage)
        {
            int HealthBonus = 5;

            if (damage > 0)
            {
                Health -= damage - HealthBonus;

                if (Health < 0)
                {
                    Health = 0;
                }
            }
        }

        public override int GetHitPower()
        {
            return Power;
        }
    }

    class InfernoWarrior : Fighter
    {
        public InfernoWarrior(string name, int health, int power, string description) : base(name, health, power, description)
        {
        }

        private int _countAttack = 0;

        public override void TakeDamage(int damage)
        {
            if (damage > 0)
            {

                if (Health < 75 && _countAttack < 1)
                {
                    damage = 0;
                }
                Health -= damage;
            }

            if (Health < 0)
            {
                Health = 0;
            }
        }

        public override int GetHitPower()
        {
            int bonusPower = 45;

            if (Health < 75 && _countAttack < 1)
            {
                _countAttack++;
                return Power + bonusPower;
            }
            else
            {
                return Power;
            }
        }
    }

    class GlacialKinght : Fighter
    {
        public GlacialKinght(string name, int health, int power, string description) : base(name, health, power, description)
        {
        }

        private Random _random = new Random();

        public override void TakeDamage(int damage)
        {
            int maxSafeNumber = 5;
            int minSafeNumber = 1;
            int safeNumber;
            int defendAttack;

            defendAttack = _random.Next(minSafeNumber, maxSafeNumber);
            safeNumber = _random.Next(minSafeNumber, maxSafeNumber);
            if (damage > 0)
            {

                if (defendAttack != safeNumber)
                {
                    Health -= Power;
                }
            }

            if (Health < 0)
            {
                Health = 0;
            }
        }

        public override int GetHitPower()
        {
            return Power;
        }
    }

    class TerraGuardian : Fighter
    {
        public TerraGuardian(string name, int health, int power, string description) : base(name, health, power, description)
        {
        }

        private int _damageCount = 0;

        public override void TakeDamage(int damage)
        {
            int healthSave = 10;
            _damageCount++;
            if (damage > 0)
            {

                if (_damageCount < 3)
                {
                    Health -= damage;
                }
                else
                {
                    Health -= (damage - healthSave);
                }
            }

            if (Health < 0)
            {
                Health = 0;
            }
        }

        public override int GetHitPower()
        {
            return Power;
        }
    }

    class KamehamehaWarrior : Fighter
    {
        public KamehamehaWarrior(string name, int health, int power, string description) : base(name, health, power, description)
        {
        }

        private int _attackCount = 0;

        public override void TakeDamage(int damage)
        {
            Health -= damage;
            if (damage > 0)
            {

                if (Health < 0)
                {
                    Health = 0;
                }
            }
        }

        public override int GetHitPower()
        {
            int bonusPower = 25;

            _attackCount++;

            if (_attackCount < 4)
            {
                return Power;
            }
            else
            {
                _attackCount = 0;
                return Power + bonusPower;
            }
        }
    }
}
