using System;
using System.Collections.Generic;

namespace School
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string CommandTakeCard = "1";
            const string CommandShowMyCards = "2";
            const string CommandRestar = "3";
            const string CommandShowAllCards = "4";
            const string CommandExit = "5";

            bool isWork = true;
            string userInput;

            MainText mainText = new MainText();
            Player player = new Player();
            DeckCard deck = new DeckCard();

            deck.PreparingCards();

            while (isWork)
            {
                Console.Clear();

                mainText.WriteCommandText();

                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandTakeCard:
                        deck.GiveCard(player);
                        break;

                    case CommandShowMyCards:
                        player.ShowPlayerCards();
                        break;

                    case CommandRestar:
                        deck.RestarDeckCard(player);
                        break;

                    case CommandShowAllCards:
                        deck.ShowAllCards();
                        break;

                    case CommandExit:
                        isWork = false;
                        break;
                }
            }
        }
    }

    class Card
    {
        public Card(string cardNumber, string suit)
        {
            CardNumber = cardNumber;
            Suit = suit;
        }

        public string CardNumber { get; private set; }
        public string Suit { get; private set; }
    }

    class DeckCard
    {
        private string[] _suits = new string[] { "♠", "♣", "♦", "♥" };

        private string[] _cards1 = new string[] { "6", "7", "8", "9", "10", "V", "Q", "K", "A" };

        private List<Card> _cards = new List<Card>();

        public void ShowAllCards()
        {

            for (int i = 0; i < _cards.Count; i++)
            {
                Console.WriteLine($"{_cards[i].CardNumber} / {_cards[i].Suit}\n");
            }

            Console.ReadLine();
        }

        public void RestarDeckCard(Player player)
        {           
            player.DeletePlayerCards();
            _cards.Clear();
            AddCards();
            ShuffleDeck(_cards);
        }

        public void PreparingCards()
        {
            AddCards();
            ShuffleDeck(_cards);
        }

        public void GiveCard(Player player)
        {
            Card card = GetCard();

            if (card != null)
            {
                player.TakeCard(card);
            }
        }

        public void ShuffleDeck<cards>(List<cards> _cards)
        {
            Random random = new Random();
            int i = _cards.Count;

            while (i > 1)
            {
                i--;
                int randomNumber = random.Next(i + 1);
                cards value = _cards[randomNumber];
                _cards[randomNumber] = _cards[i];
                _cards[i] = value;
            }
        }

        private void AddCards()
        {

            for (int i = 0; i < _suits.Length; i++)
            {

                for (int j = 0; j < _cards1.Length; j++)
                {
                    _cards.Add(new Card(_cards1[j], _suits[i]));
                }
            }
        }

        private Card GetCard()
        {

            if (_cards.Count > 0)
            {
                int firstCard = 0;

                Card card = _cards[firstCard];
                _cards.Remove(card);
                return card;
            }

            return null;
        }
    }

    class Player
    {
        private List<Card> PlayerCards = new List<Card>();

        public void ShowPlayerCards()
        {

            for (int i = 0; i < PlayerCards.Count; i++)
            {
                Console.WriteLine($"{PlayerCards[i].CardNumber} / {PlayerCards[i].Suit}\n");
            }

            Console.ReadLine();
        }

        public void DeletePlayerCards()
        {
            PlayerCards.Clear();
        }

        public void TakeCard(Card card)
        {
            PlayerCards.Add(card);
        }
    }

    class MainText
    {
        public void WriteText(string text, ConsoleColor color = ConsoleColor.White)
        {
            ConsoleColor defualt = Console.ForegroundColor;
            Console.ForegroundColor = color;
            Console.WriteLine(text);
            Console.ForegroundColor = defualt;
        }

        public void WriteCommandText()
        {
            const string CommandTakeCard = "1";
            const string CommandShowMyCards = "2";
            const string CommandRestar = "3";
            const string CommandShowAllCards = "4";
            const string CommandExit = "5";

            WriteText($"{CommandTakeCard} - To take card", ConsoleColor.Cyan);
            WriteText($"{CommandShowMyCards} - To view your cards", ConsoleColor.Cyan);
            WriteText($"{CommandRestar} - To reshuffle the cards", ConsoleColor.Cyan);
            WriteText($"{CommandShowAllCards} - To see all cards", ConsoleColor.Cyan);
            WriteText($"{CommandExit} - To exit", ConsoleColor.Cyan);
        }
    }
}
