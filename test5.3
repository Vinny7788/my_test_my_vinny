using System;
using System.Collections.Generic;
using System.Threading;

namespace School
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string CommandTakeCard = "1";
            const string CommandShowMyCards = "2";
            const string CommandRestar = "3";
            const string CommandShowAllCards = "4";
            const string CommandExit = "5";

            bool isWork = true;
            string userInput;

            MainText mainText = new MainText();
            Player player = new Player();
            DeckCard deck = new DeckCard();

            while (isWork)
            {
                Console.Clear();

                mainText.WriteCommand();

                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandTakeCard:
                        player.TakeCard(deck.GetCard());
                        break;

                    case CommandShowMyCards:
                        player.ShowCards();
                        break;

                    case CommandRestar:
                        deck.Restar();
                        player.DeleteCards();
                        break;

                    case CommandShowAllCards:
                        deck.ShowAllCards();
                        break;

                    case CommandExit:
                        isWork = false;
                        break;
                }
            }
        }
    }

    class Card
    {
        public Card(string number, string suit)
        {
            Number = number;
            Suit = suit;
        }

        public string Number { get; private set; }
        public string Suit { get; private set; }
    }

    class DeckCard
    {
        public DeckCard()
        {
            AddCards();
            ShufflingCards();
        }
            
        private List<Card> _cards = new List<Card>();

        public void ShowAllCards()
        {
            for (int i = 0; i < _cards.Count; i++)
            {
                Console.WriteLine($"{_cards[i].Number} / {_cards[i].Suit}\n");
            }

            Console.ReadLine();
        }

        public void Restar()
        {
            _cards.Clear();
            AddCards();
        }

        public Card GetCard()
        {
            if (_cards.Count > 0)
            {
                Card card = _cards[0];
                _cards.Remove(card);
                return card;
            }

            return null;
        }

        private void AddCards()
        {
            string[] _suits = new string[] { "♠", "♣", "♦", "♥" };
            string[] _cardsPictures = new string[] { "6", "7", "8", "9", "10", "V", "Q", "K", "A" };

            Random random = new Random();

            for (int i = 0; i < _suits.Length; i++)
            {

                for (int j = 0; j < _cardsPictures.Length; j++)
                {
                    _cards.Add(new Card(_cardsPictures[j], _suits[i]));
                }
            }
        }

        private void ShufflingCards()
        {
            Random random = new Random();

            for (int i = _cards.Count - 1; i > 0; i--)
            {
                int n = random.Next(_cards.Count);
                int j = random.Next(_cards.Count);
                Card temporary = _cards[n];
                _cards[n] = _cards[j];
                _cards[j] = temporary;
            }
        }
    }

    class Player
    {
        private List<Card> _cards = new List<Card>();

        public void ShowCards()
        {
            for (int i = 0; i < _cards.Count; i++)
            {
                Console.WriteLine($"{_cards[i].Number} / {_cards[i].Suit}\n");
            }

            Console.ReadLine();
        }

        public void DeleteCards()
        {
            _cards.Clear();
        }

        public void TakeCard(Card card)
        { 
            if (card != null)
            {
                _cards.Add(card);
            }
            else
            {
                Console.WriteLine("No cards");
                Thread.Sleep(1000);
            }
        }
    }

    class MainText
    {
        private void WriteText(string text, ConsoleColor color = ConsoleColor.White)
        {
            ConsoleColor defualt = Console.ForegroundColor;
            Console.ForegroundColor = color;
            Console.WriteLine(text);
            Console.ForegroundColor = defualt;
        }

        public void WriteCommand()
        {
            const string CommandTakeCard = "1";
            const string CommandShowMyCards = "2";
            const string CommandRestar = "3";
            const string CommandShowAllCards = "4";
            const string CommandExit = "5";

            WriteText($"{CommandTakeCard} - To take card", ConsoleColor.Cyan);
            WriteText($"{CommandShowMyCards} - To view your cards", ConsoleColor.Cyan);
            WriteText($"{CommandRestar} - To reshuffle the cards", ConsoleColor.Cyan);
            WriteText($"{CommandShowAllCards} - To see all cards", ConsoleColor.Cyan);
            WriteText($"{CommandExit} - To exit", ConsoleColor.Cyan);
        }
    }
}
