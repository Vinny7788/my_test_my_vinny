using System;
using System.IO;

namespace School
{
    internal class Program
    {
        static void Main(string[] args)
        {
            char wall = '#';
            char player = '$';
            bool isPlaying = true;
            int playerPositionX;
            int playerPositionY;
            int playerDirectionX = 0;
            int playerDirectionY = 0;
            char[,] map = ReadMap("map1", out playerPositionX, out playerPositionY, player);
            Console.CursorVisible = false;

            Draw(map);

            while (isPlaying)
            {
                ChoseDirection(playerDirectionX, playerDirectionY, ref playerPositionX, ref playerPositionY, map, player, wall);
            }
        }

        static void ChoseDirection(int playerDirectionX, int playerDirectionY, ref int playerPositionX, ref int playerPositionY, char[,] map, char player, char wall)
        {
            const ConsoleKey CommandUpArrowKey = ConsoleKey.UpArrow;
            const ConsoleKey CommandDownArrowKey = ConsoleKey.DownArrow;
            const ConsoleKey CommandLeftArrowKey = ConsoleKey.LeftArrow;
            const ConsoleKey CommandRightArrowKey = ConsoleKey.RightArrow;

            int zeroPosition = 0;
            int moveUp = -1;
            int moveDown = 1;
            int moveLeft = -1;
            int moveRight = 1;

            if (Console.KeyAvailable)
            {
                ConsoleKeyInfo key = Console.ReadKey(true);

                switch (key.Key)
                {
                    case CommandUpArrowKey:
                        playerDirectionX = moveUp;
                        playerDirectionY = zeroPosition;
                        break;

                    case CommandDownArrowKey:
                        playerDirectionX = moveDown;
                        playerDirectionY = zeroPosition;
                        break;

                    case CommandLeftArrowKey:
                        playerDirectionX = zeroPosition;
                        playerDirectionY = moveLeft;
                        break;

                    case CommandRightArrowKey:
                        playerDirectionX = zeroPosition;
                        playerDirectionY = moveRight;
                        break;
                }
                Move(ref playerPositionX, ref playerDirectionX, ref playerPositionY, ref playerDirectionY, map, player, wall);
            }
        }

        static void Draw(char[,] map)
        {
            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    Console.Write(map[i, j]);
                }

                Console.WriteLine();
            }
        }

        static char[,] ReadMap(string mapName, out int playerX, out int playerY, char player)
        {
            playerX = 0;
            playerY = 0;

            string[] newFile = File.ReadAllLines($"Maps/{mapName}.txt");
            char[,] map = new char[newFile.Length, newFile[0].Length];

            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    map[i, j] = newFile[i][j];

                    if (map[i, j] == player)
                    {
                        playerX = i;
                        playerY = j;
                    }
                }
            }

            return map;
        }

        static void RenderPlayer(int playerPositionY, int playerPositionX, char symbol = ' ')
        {
            Console.SetCursorPosition(playerPositionY, playerPositionX);
            Console.Write(symbol);
        }

        static void Move(ref int playerPositionX, ref int playerDirectionX, ref int playerPositionY, ref int playerDirectionY, char[,] map, char player, char wall)
        {
            if (map[playerPositionX + playerDirectionX, playerPositionY + playerDirectionY] != wall)
            {
                RenderPlayer(playerPositionY, playerPositionX);

                playerPositionX += playerDirectionX;
                playerPositionY += playerDirectionY;

                RenderPlayer(playerPositionY, playerPositionX, player);
            }
        }
    }
}
