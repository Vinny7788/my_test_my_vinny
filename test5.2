using System;
using System.Collections.Generic;
using System.Threading;

namespace School
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.CursorVisible = false;
            Base playersBase = new Base();

            const string CommandOpenBase = "1";
            const string CommandCloseConsole = "2";

            bool isAdminWork = true;
            string userInput;

            while (isAdminWork)
            {
                playersBase.WriteText($"To open Base press - {CommandOpenBase}\n");
                playersBase.WriteText($"To close Console press - {CommandCloseConsole}\n");
                userInput = Console.ReadLine();

                if (userInput == CommandOpenBase)
                {
                    playersBase.Work();
                }
                else if (userInput == CommandCloseConsole)
                {
                    isAdminWork = false;
                }

                Console.Clear();
            }
        }
    }

    class Base
    {
        private int _uniqueId;
        private int _sleepTwoSecond = 2000;

        private List<Player> _players = new List<Player>();

        public void Work()
        {
            const string CommandAddPlayer = "1";
            const string CommandBanPlayer = "2";
            const string CommandUnbanPlayer = "3";
            const string CommandDeletePlayer = "4";
            const string CommandSerchPlayer = "5";
            const string CommandTerminateProgram = "6";

            bool isWork = true;

            Console.Clear();

            while (isWork)
            {
                string userInput;

                Console.SetCursorPosition(0, 15);
                ShowAllPlayers();
                Console.SetCursorPosition(0, 0);

                WriteText($"{CommandAddPlayer} - To add a new player.", ConsoleColor.Yellow);
                WriteText($"{CommandBanPlayer} - To ban a player.", ConsoleColor.Yellow);
                WriteText($"{CommandUnbanPlayer} - To unban a player.", ConsoleColor.Yellow);
                WriteText($"{CommandDeletePlayer} - To delete player.", ConsoleColor.Yellow);
                WriteText($"{CommandSerchPlayer} - To serch the player.", ConsoleColor.Yellow);
                WriteText($"{CommandTerminateProgram} - To terminate the program.", ConsoleColor.Yellow);

                userInput = Console.ReadLine();
                Console.Clear();

                switch (userInput)
                {
                    case CommandAddPlayer:
                        AddNewPlayer();
                        break;

                    case CommandBanPlayer:
                        BanPlayer();
                        break;

                    case CommandUnbanPlayer:
                        UnbanPleyer();
                        break;

                    case CommandDeletePlayer:
                        DeletePlayer();
                        break;

                    case CommandSerchPlayer:
                        SerchPlayer();
                        break;

                    case CommandTerminateProgram:
                        isWork = false;
                        break;
                }
            }
        }

        public void WriteText(string text, ConsoleColor color = ConsoleColor.White)
        {
            Console.ForegroundColor = color;
            Console.WriteLine(text);
            Console.ForegroundColor = ConsoleColor.White;
        }

        private void DeletePlayer()
        {
            if (TryGetPlayer(out Player player))
            {
                _players.Remove(player);
                WriteText("Operation Complete", ConsoleColor.Green);
                Thread.Sleep(_sleepTwoSecond);
                Console.Clear();
            }
            else
            {
                WriteText("Player Not found", ConsoleColor.Red);
                Thread.Sleep(_sleepTwoSecond);
            }
        }

        private void ShowAllPlayers()
        {
            for (int i = 0; i < _players.Count; i++)
            {
                Console.Write($"Nickname - {_players[i].NickName} / id - {_players[i].Id} / level - {_players[i].Level} / Ban status - ");
                PrintBanStatus(i);
            }
        }

        private void PrintBanStatus(Player player)
        {
            if (player.isBanned == true)
            {
                WriteText(Convert.ToString(player.isBanned), ConsoleColor.Red);
            }
            else
            {
                WriteText(Convert.ToString(player.isBanned), ConsoleColor.Green);
            }
        }

        private void PrintBanStatus(int index)
        {
            if (_players[index].isBanned == true)
            {
                WriteText(Convert.ToString(_players[index].isBanned), ConsoleColor.Red);
            }
            else
            {
                WriteText(Convert.ToString(_players[index].isBanned), ConsoleColor.Green);
            }
        }

        private void AddNewPlayer()
        {
            string userInput;

            Console.Write("Write the Nickname : ");
            userInput = Console.ReadLine();

            _players.Add(new Player(userInput, GenerationId()));
            Console.Clear();
        }

        private int GenerationId()
        {
            int idModificator = 8900;
            _uniqueId++;

            return idModificator + _uniqueId;
        }

        private void UnbanPleyer()
        {
            if (TryGetPlayer(out Player player))
            {
                if (player.isBanned == true)
                {
                    player.Unban();

                    WriteText("Operation Complete", ConsoleColor.Green);
                    Thread.Sleep(_sleepTwoSecond);
                    Console.Clear();
                }
                else
                {
                    WriteText("The player is not banned.", ConsoleColor.Red);
                    Thread.Sleep(_sleepTwoSecond);
                    Console.Clear();
                }

            }
            else
            {
                WriteText("Player Not found", ConsoleColor.Red);
                Thread.Sleep(_sleepTwoSecond);
            }
        }

        private void BanPlayer()
        {
            if (TryGetPlayer(out Player player))
            {
                if (player.isBanned != true)
                {
                    player.Ban();

                    WriteText("Operation Complete", ConsoleColor.Green);
                    Thread.Sleep(_sleepTwoSecond);
                    Console.Clear();
                }
                else
                {
                    WriteText("The player is already banned", ConsoleColor.Red);
                    Thread.Sleep(_sleepTwoSecond);
                    Console.Clear();
                }

            }
            else
            {
                WriteText("Player Not found", ConsoleColor.Red);
                Thread.Sleep(_sleepTwoSecond);
            }
        }

        private bool TryGetPlayer(out Player player)
        {
            WriteText("Write Player ID: ", ConsoleColor.Yellow);
            string userInput = Console.ReadLine();
            int playerIdToFind;

            if (int.TryParse(userInput, out int userIdInput))
            {
                playerIdToFind = userIdInput;
            }
            else
            {
                playerIdToFind = -1;
            }

            player = null;
            player = _players.Find(toFind => toFind.Id == playerIdToFind);

            return player != null;
        }

        private void SerchPlayer()
        {
            if (TryGetPlayer(out Player player))
            {
                if (player != null)
                {
                    Console.Clear();

                    WriteText($"Player with ID - /{player.Id}/ Found", ConsoleColor.Green);
                    WriteText($"Nickname - {player.NickName} / id - {player.Id} / level - {player.Level} / Ban status - ");
                    PrintBanStatus(player);

                    Console.ReadLine();
                    Console.Clear();
                }

            }
            else
            {
                WriteText("Player Not found", ConsoleColor.Red);
                Thread.Sleep(_sleepTwoSecond);
            }
        }
    }

    class Player
    {
        public Player(string nickName, int id)
        {
            NickName = nickName;
            Id = id;
            isBanned = false;
            Level = 1;
        }

        public int Id { get; private set; }
        public int Level { get; private set; }
        public string NickName { get; private set; }
        public bool isBanned { get; private set; }

        public void Ban()
        {
            isBanned = true;
        }
        public void Unban()
        {
            isBanned = false;
        }
    }
}
