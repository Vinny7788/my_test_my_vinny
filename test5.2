using System;
using System.Collections.Generic;
using System.Threading;

namespace School
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.CursorVisible = false;
            PlayersBase playersBase = new PlayersBase();

            const string CommandOpenBase = "1";
            const string CommandCloseConsole = "2";

            bool isAdminWork = true;
            string userInput;

            while (isAdminWork)
            {
                playersBase.WriteText($"To open Base press - {CommandOpenBase}\n");
                playersBase.WriteText($"To close Console press - {CommandCloseConsole}\n");
                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandOpenBase:
                        playersBase.Work();
                        break;

                    case CommandCloseConsole:
                        isAdminWork = false;
                        break;
                }
                Console.Clear();
            }
        }
    }

    class PlayersBase
    {
        public int UniqueId { get; private set; }

        private int _sleepOneSecond = 1000;
        private int _sleepTwoSecond = 2000;
        private bool _isWork;

        private List<Player> AllPlayers = new List<Player>();

        public void Work()
        {
            const string CommandAddPlayer = "1";
            const string CommandBanUnban = "2";
            const string CommandDeletePlayer = "3";
            const string CommandSerchPlayer = "4";
            const string CommandTerminateProgram = "5";

            _isWork = true;

            Console.Clear();

            while (_isWork)
            {
                string userInput;

                Console.SetCursorPosition(0, 15);
                ShowAllPlayers();
                Console.SetCursorPosition(0, 0);

                WriteText($"{CommandAddPlayer} - To add a new player.", ConsoleColor.Yellow);
                WriteText($"{CommandBanUnban} - To ban or unban a player.", ConsoleColor.Yellow);
                WriteText($"{CommandDeletePlayer} - To delete player.", ConsoleColor.Yellow);
                WriteText($"{CommandSerchPlayer} - To serch the player.", ConsoleColor.Yellow);
                WriteText($"{CommandTerminateProgram} - To terminate the program.", ConsoleColor.Yellow);

                userInput = Console.ReadLine();
                Console.Clear();

                switch (userInput)
                {
                    case CommandAddPlayer:
                        AddNewPlayer();
                        break;

                    case CommandBanUnban:
                        BanPlayer();
                        break;

                    case CommandDeletePlayer:
                        DeletePlayer();
                        break;

                    case CommandSerchPlayer:
                        SerchPlayer();
                        break;

                    case CommandTerminateProgram:
                        _isWork = false;
                        break;
                }
            }
        }

        public void WriteText(string text, ConsoleColor color = ConsoleColor.White)
        {
            Console.ForegroundColor = color;
            Console.WriteLine(text);
            Console.ForegroundColor = ConsoleColor.White;
        }

        private void DeletePlayer()
        {
            int userIdInput;

            WriteText("Write player id: ");

            if (int.TryParse(Console.ReadLine(), out userIdInput) && userIdInput < AllPlayers.Count)
            {
                AllPlayers.RemoveAt(userIdInput);
            }
            else
            {
                WriteText("Invalid format", ConsoleColor.Red);
                Thread.Sleep(_sleepTwoSecond);
            }
        }

        private void ShowAllPlayers()
        {

            for (int i = 0; i < AllPlayers.Count; i++)
            {
                Console.Write($"Nickname - {AllPlayers[i].NickName} / id - {AllPlayers[i].Id} / level - {AllPlayers[i].Level} / Ban status - ");
                ShowBunInformation(i);
            }
        }

        private void ShowBunInformation(int index)
        {

            if (AllPlayers[index].Ban == true)
            {
                WriteText(Convert.ToString(AllPlayers[index].Ban), ConsoleColor.Red);
            }
            else
            {
                WriteText(Convert.ToString(AllPlayers[index].Ban), ConsoleColor.Green);
            }
        }

        private void AddNewPlayer()
        {
            string userInput;
            Console.Write("Write the Nickname : ");
            userInput = Console.ReadLine();

            AllPlayers.Add(new Player(userInput, IdGeneration()));
            Console.Clear();
        }

        private int IdGeneration()
        {
            Random random = new Random();
            int idModificator = 8900;
            UniqueId++;
            return idModificator + UniqueId;
        }

        private void BanPlayer()
        {
            string userInput;

            Console.Write("Write Player ID: ");
            userInput = Console.ReadLine();

            if (Int32.TryParse(userInput, out int id) && id >= 0 && id <= FindLastId())
            {
                int index = AllPlayers.FindIndex(player => player.Id == id);

                if (AllPlayers[index].Ban)
                {
                    AllPlayers[index].ChangeBanStatus(false);
                }
                else
                {
                    AllPlayers[index].ChangeBanStatus(true);
                }

                WriteText("Operation Complete", ConsoleColor.Green);
                Thread.Sleep(_sleepTwoSecond);
                Console.Clear();
            }
            else
            {
                WriteText("ID not found!", ConsoleColor.Red);
                Thread.Sleep(_sleepTwoSecond);
                Console.Clear();
            }
        }

        private void SerchPlayer()
        {
            string userInput;

            Console.Write("Enter ID to search a Player :");
            userInput = Console.ReadLine();

            if (Int32.TryParse(userInput, out int id))
            {
                int index = (AllPlayers.FindIndex(player => player.Id == id));

                if (index != -1)
                {
                    Console.Clear();

                    WriteText($"Player with ID - /{id}/ Found", ConsoleColor.Green);
                    Console.Write($"Nickname - {AllPlayers[index].NickName} / id - {AllPlayers[index].Id} / level - {AllPlayers[index].Level} / Ban status - ");
                    ShowBunInformation(index);

                    Console.ReadLine();
                    Console.Clear();
                }
                else
                {
                    Console.Clear();

                    WriteText($"Player with ID - /{id}/ not Found\n", ConsoleColor.Red);

                    Thread.Sleep(_sleepTwoSecond);
                    Console.Clear();
                }

            }
            else
            {
                Console.Clear();

                WriteText("Invalid foramt", ConsoleColor.Red);

                Thread.Sleep(_sleepOneSecond);

            }
        }

        private int FindLastId()
        {
            int maxId = 0;

            for (int i = 0; i < AllPlayers.Count; i++)
            {

                if (AllPlayers[i].Id > maxId)
                {
                    maxId = AllPlayers[i].Id;
                }
            }
            return maxId;
        }
    }


    class Player
    {
        private bool _ban;

        public Player(string nickName, int id)
        {
            NickName = nickName;
            Id = id;
            Ban = false;
            Level = 1;
        }

        public int Id { get; private set; }
        public int Level { get; private set; }
        public string NickName { get; private set; }
        public bool Ban { get; private set; }

        public bool ChangeBanStatus(bool BanStatus)
        {
           return Ban = BanStatus;
        }        
    }
}
