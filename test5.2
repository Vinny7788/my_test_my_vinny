using System;
using System.Collections.Generic;
using System.Threading;

namespace School
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.CursorVisible = false;
            PlayersBase playersBase = new PlayersBase();

            const string CommandOpenBase = "1";
            const string CommandCloseConsole = "2";

            bool isAdminWork = true;
            string userInput;

            while (isAdminWork)
            {
                playersBase.WriteText($"To open Base press - {CommandOpenBase}\n");
                playersBase.WriteText($"To close Console press - {CommandCloseConsole}\n");
                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandOpenBase:
                        playersBase.Work();
                        break;

                    case CommandCloseConsole:
                        isAdminWork = false;
                        break;
                }
                Console.Clear();
            }
        }
    }

    class PlayersBase
    {
        private int _uniqueId;
        private int _sleepTwoSecond = 2000;
        private bool _isWork;

        private List<Player> Players = new List<Player>();

        public void Work()
        {
            const string CommandAddPlayer = "1";
            const string CommandBanUnban = "2";
            const string CommandDeletePlayer = "3";
            const string CommandSerchPlayer = "4";
            const string CommandTerminateProgram = "5";

            _isWork = true;

            Console.Clear();

            while (_isWork)
            {
                string userInput;

                Console.SetCursorPosition(0, 15);
                ShowAllPlayers();
                Console.SetCursorPosition(0, 0);

                WriteText($"{CommandAddPlayer} - To add a new player.", ConsoleColor.Yellow);
                WriteText($"{CommandBanUnban} - To ban or unban a player.", ConsoleColor.Yellow);
                WriteText($"{CommandDeletePlayer} - To delete player.", ConsoleColor.Yellow);
                WriteText($"{CommandSerchPlayer} - To serch the player.", ConsoleColor.Yellow);
                WriteText($"{CommandTerminateProgram} - To terminate the program.", ConsoleColor.Yellow);

                userInput = Console.ReadLine();
                Console.Clear();

                switch (userInput)
                {
                    case CommandAddPlayer:
                        AddNewPlayer();
                        break;

                    case CommandBanUnban:
                        BanPlayer();
                        break;

                    case CommandDeletePlayer:
                        DeletePlayer();
                        break;

                    case CommandSerchPlayer:
                        SerchPlayer1();
                        break;

                    case CommandTerminateProgram:
                        _isWork = false;
                        break;
                }
            }
        }

        public void WriteText(string text, ConsoleColor color = ConsoleColor.White)
        {
            Console.ForegroundColor = color;
            Console.WriteLine(text);
            Console.ForegroundColor = ConsoleColor.White;
        }

        private void DeletePlayer()
        {

            if (TryGetPlayer(out Player player, "Invalid Format", ConsoleColor.Red))
            {
                Players.Remove(player);
            }
        }

        private void ShowAllPlayers()
        {

            for (int i = 0; i < Players.Count; i++)
            {
                Console.Write($"Nickname - {Players[i].NickName} / id - {Players[i].Id} / level - {Players[i].Level} / Ban status - ");
                PrintBanStatus(i);
            }
        }

        private void PrintBanStatus(Player player)
        {

            if (player.isBan == true)
            {
                WriteText(Convert.ToString(player.isBan), ConsoleColor.Red);
            }
            else
            {
                WriteText(Convert.ToString(player.isBan), ConsoleColor.Green);
            }
        }

        private void PrintBanStatus(int index)
        {

            if (Players[index].isBan == true)
            {
                WriteText(Convert.ToString(Players[index].isBan), ConsoleColor.Red);
            }
            else
            {
                WriteText(Convert.ToString(Players[index].isBan), ConsoleColor.Green);
            }
        }

        private void AddNewPlayer()
        {
            string userInput;

            Console.Write("Write the Nickname : ");
            userInput = Console.ReadLine();

            Players.Add(new Player(userInput, GenerationId()));
            Console.Clear();
        }

        private int GenerationId()
        {
            int idModificator = 8900;
            _uniqueId++;

            return idModificator + _uniqueId;
        }

        private void BanPlayer()
        {

            if (TryGetPlayer(out Player player, "Invalid Format", ConsoleColor.Red))
            {

                if (player.isBan == true)
                {
                    player.UnbanPlayer(player);
                }
                else
                {
                    player.BanPlayer(player);
                }

                WriteText("Operation Complete", ConsoleColor.Green);
                Thread.Sleep(_sleepTwoSecond);
                Console.Clear();
            }
        }

        private bool TryGetPlayer(out Player player, string ErrorText, ConsoleColor color = ConsoleColor.White)
        {
            WriteText("Write Player ID: ", ConsoleColor.Yellow);
            string userInput = Console.ReadLine();

            if (int.TryParse(userInput, out int playerIdToFind))
            {

            }
            else
            {
                WriteText(ErrorText, color);
                Thread.Sleep(_sleepTwoSecond);
                Console.Clear();
            }

            player = null;
            player = Players.Find(p => p.Id == playerIdToFind);

            return player != null;
        }

        private void SerchPlayer1()
        {

            if (TryGetPlayer(out Player player, $"Player not Found\n", ConsoleColor.Red))
            {
                Console.Clear();

                WriteText($"Player with ID - /{player.Id}/ Found", ConsoleColor.Green);
                WriteText("Nickname - {player.NickName} / id - {player.Id} / level - {player.Level} / Ban status - ");
                PrintBanStatus(player);

                Console.ReadLine();
                Console.Clear();
            }
            else { }
        }
    }

    class Player
    {
        public Player(string nickName, int id)
        {
            NickName = nickName;
            Id = id;
            isBan = false;
            Level = 1;
        }

        public int Id { get; private set; }
        public int Level { get; private set; }
        public string NickName { get; private set; }
        public bool isBan { get; private set; }

        public void BanPlayer(Player player)
        {
            player.isBan = true;
        }
        public void UnbanPlayer(Player player)
        {
            player.isBan = false;
        }
    }
}
